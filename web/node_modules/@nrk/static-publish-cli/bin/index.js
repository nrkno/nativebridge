#!/usr/bin/env node

/* eslint-disable no-sync */
const fs = require('fs');
const path = require('path');
const vorpal = require('vorpal')();

const publish = require('./publish');

const commands = ['publish'];

const hasFiles = (paths, callback) => {
  try {
    paths.forEach((path) => fs.statSync(path));
    return callback();
  } catch(err) {
    vorpal.log(`Can not publish, missing required files ${paths}`);
    return callback(err);
  }
};

const sanitizeRemoteDir = (path) => {
  if (path.lastIndexOf('/') !== path.length -1) {
    return `${path}/`;
  }
  return path;
};

const defaultRemoteDir = '/mnt/nas/ds1-static/nrkstatic';
const defaultHost = 'madmzlxstatic01.dmz.nrk.no';
vorpal
  .command('publish', 'Publish a folder to static server')
  .option('-m, --package <path including package.json>', 'Name and version becomes the folder')
  .option('-d, --directory <directory to upload>', 'Directory containing bundles/files to publish')
  .option('-p, --password <pwd>', 'Private key passphrase (if needed) to host')
  .option('-l, --latest', 'Creates / updates a latest symlink to this new version')
  .option('-r, --remotedir <path>', `Remote directory, default: ${defaultRemoteDir}`)
  .option('-h, --host <hostname>', `Server destination hostname, default: ${defaultHost}`)
  .option('-v, --verbose', 'Excessive logging (you have been warned)')
  .autocomplete(commands)
  .action((args, callback) => {

    const directory = args.options.directory || 'dist/';
    const withLatest = args.options.latest || null;
    const verbose = args.options.verbose || false;
    const host = args.options.host || defaultHost;
    const remoteDir = sanitizeRemoteDir(args.options.remotedir || defaultRemoteDir);

    const packagePath = args.options.package || `${directory}/package.json`;
    /* eslint-disable consistent-return */
    hasFiles([path.resolve(packagePath), path.resolve(directory)], (err) => {
      if (err) {
        return callback(err);
      }

      const pkg = JSON.parse(fs.readFileSync(packagePath));
      const publishOptions = {
        verbose,
        directory,
        withLatest,
        host,
        remoteDir,
        name: pkg.name,
        version: pkg.version
      };
      if (!args.options.password) {
        vorpal.activeCommand.prompt({
          type: 'password',
          name: 'pwd',
          default: null,
          message: 'Private key passphrase plz? ',
        }).then((result) => {
          if (result.pwd) {
            publishOptions.passphrase = result.pwd;
            return publish(vorpal, publishOptions, callback);
          }
        });
      } else {
        publishOptions.passphrase = args.options.password;
        publish(vorpal, publishOptions, callback);
      }
    });
    /* eslint-enable consistent-return */
  }
);

vorpal.delimiter('[static-publish]-$: ').show().parse(process.argv);
