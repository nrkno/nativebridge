/* eslint-disable max-params, no-sync, no-process-env, consistent-return */
const fs = require('fs');
const path = require('path');
const tar = require('tar-fs');

const scpFile = require('./scpfile');
const rollout = require('./rollout');

const compressdist = (path, archiveName, onEnd, onError) => {
  tar.pack(path).on('error', onError).pipe(fs.createWriteStream(archiveName)).on('finish', onEnd);
};

const runSSHCommand = (options, cb) => {
  scpFile(options, (err) => {
    if (err) {
      return cb(err);
    }
    const sshExecOptions = {
      host: options.cdnHostName,
      port: 22,
      username: options.cdnUsername,
      privateKey: fs.readFileSync(options.cdnPrivateKeyPath),
      passphrase: options.cdnPrivateKeyPassphrase,
      verbose: options.verbose
    };
    rollout(sshExecOptions, options, cb);
  });
};

const stripPackageScope = (archiveName) => {
  return archiveName.replace(/^@.*\/(.*)/g, '$1');
};

module.exports = (vorpal, options, callback) => {
  const homedir = (process.platform === 'win32') ? process.env.HOMEPATH : process.env.HOME;
  const name = options.name;
  const version = options.version;

  const sanitizedPackageName = stripPackageScope(name);
  const archiveFileName = `${sanitizedPackageName}-${version}.tar`;

  const sshOptions = {
    cdnHostName: options.host,
    cdnUsername: 'staticdeploy',
    cdnPrivateKeyPath: path.join(homedir, '.ssh/id_rsa'),
    remoteDir: options.remoteDir,
    archive: archiveFileName,
    version,
    name: sanitizedPackageName,
    verbose: options.verbose
  };
  if (options.passphrase) {
    sshOptions.withLatest = options.withLatest;
    sshOptions.cdnPrivateKeyPassphrase = options.passphrase;
  }
  compressdist(options.directory, archiveFileName, () => {
    vorpal.log(`Pushing "${archiveFileName}"..`);
    runSSHCommand(sshOptions, (err) => {
      if (err) {
        vorpal.log(`Error publishing ${archiveFileName}: ${err}`);
        return callback();
      }
    });
  }, (err) => {
    vorpal.log(`Error compressing distribution package ${err}`);
    return callback();
  });
};
