/*eslint-disable no-console, prefer-template */
const SshClient = require('ssh2').Client;

module.exports = (sshExecOptions, options, callback) => {

  const conn = new SshClient();

  conn.on('ready', () => {
    conn.shell((err, stream) => {
      if (err) {
        throw err;
      }
      stream.on('close', (code, signal) => {
        if (sshExecOptions.verbose) {
          console.log('Stream :: close :: code: ' + code + ', signal: ' + signal);
        }
        conn.end();
        callback();
      }).on('data', (data) => {
        if (sshExecOptions.verbose) {
          console.log('STDOUT: ' + data);
        }
      }).stderr.on('data', (data) => {
        if (sshExecOptions.verbose) {
          console.log('STDERR: ' + data);
        }
      });

      const archiveDirName = `${options.name}/${options.version}`;
      const latestCommandIfDefined = (options.withLatest !== null) ? `
      rm ${options.name}/latest
      cd ${options.name}
      ln -s ${options.version} latest
      cd ..
      ` : '';
      const sshCommandString = `cd ${options.remoteDir}
        mkdir ${options.name}
        mkdir ${options.name}/${options.version}
        ${latestCommandIfDefined}
        tar xvf ${options.archive} -C ${archiveDirName}
        rm ${options.archive}
        exit
        `;
      stream.end(sshCommandString);
    });
  }).connect(sshExecOptions);
};
