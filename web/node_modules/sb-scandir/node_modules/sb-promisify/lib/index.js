'use strict';

function promisify(callback) {
  var throwError = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  return function promisified() {
    var _this = this;

    var parameters = Array.from ? Array.from(arguments) : Array.prototype.slice.call(arguments);
    var parametersLength = parameters.length + 1;
    var promise = new Promise(function (resolve, reject) {
      parameters.push(function (error, data) {
        if (error) {
          reject(error);
        } else resolve(data);
      });
      if (parametersLength === 1) {
        callback.call(_this, parameters[0]);
      } else if (parametersLength === 2) {
        callback.call(_this, parameters[0], parameters[1]);
      } else if (parametersLength === 3) {
        callback.call(_this, parameters[0], parameters[1], parameters[2]);
      } else if (parametersLength === 4) {
        callback.call(_this, parameters[0], parameters[1], parameters[2], parameters[3]);
      } else {
        callback.apply(_this, parameters);
      }
    });
    if (!throwError) {
      promise = promise.catch(function () {
        return null;
      });
    }
    return promise;
  };
}

function promisifyAll(object) {
  var throwError = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  var duplicate = Object.assign({}, object);
  for (var item in duplicate) {
    if (duplicate.hasOwnProperty(item)) {
      var value = duplicate[item];
      if (typeof value === 'function') {
        duplicate[item] = promisify(value, throwError);
      }
    }
  }
  return duplicate;
}

module.exports = promisify;
module.exports.promisifyAll = promisifyAll;